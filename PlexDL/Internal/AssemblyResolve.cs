using System;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Windows.Forms;

namespace PlexDL.Internal
{
    /// <summary>
    /// Handler for finding missing assemblies and reloading them on failure
    /// </summary>
    public static class AssemblyResolve
    {
        //THESE ARE THE FORMAL LOCATIONS OF PLEXDL FILES.
        //THEY ARE CREATED/REMOVED/UPDATED VIA POST-BUILD EVENTS.
        //DO NOT MODIFY UNLESS YOU ARE MODIFYING THE POST-BUILD EVENTS SCRIPT.

        /// <summary>
        /// Post-build location for DLL relocation
        /// </summary>
        public static string LibraryDirectory { get; } = @"lib";

        /// <summary>
        /// Post-build location for PDB relocation
        /// </summary>
        public static string DebugDirectory { get; } = @"pdb";

        /// <summary>
        /// Post-build location for XML relocation
        /// </summary>
        public static string XmlDirectory { get; } = @"xml"; //NOTE: These are generated by the compiler; not by PlexDL.

        /// <summary>
        /// Directory of the currently executing PlexDL.exe binary
        /// </summary>
        public static string PlexDlLocation { get; } = Path.GetDirectoryName(Process.GetCurrentProcess().MainModule?.FileName ?? string.Empty);

        /// <summary>
        /// Main locator and resolver
        /// <br></br>CREDIT: https://weblog.west-wind.com/posts/2016/dec/12/loading-net-assemblies-out-of-seperate-folders
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="args"></param>
        /// <returns></returns>
        public static Assembly HandleResolve(object sender, ResolveEventArgs args)
        {
            // The filename of the DLL being loaded
            var filename = args.Name.Split(',')[0] + ".dll".ToLower();

            // Ignore missing resources and autogenerated XmlSerializers binary
            if (args.Name.Contains(".resources") || args.Name.Contains(@".XmlSerializers"))
            {
                // Log the assembly event
                LogAssemblyResolve(filename, @"Skipped; assembly deemed non-critical.");
                return null;
            }

            // Check for assemblies already loaded
            var assembly = AppDomain.CurrentDomain.GetAssemblies().FirstOrDefault(a => a.FullName == args.Name);
            if (assembly != null)
            {
                // Log the assembly event
                LogAssemblyResolve(filename, @"Loaded; automatically found and loaded.");
                return assembly;
            }

            // Log the assembly event
            LogAssemblyResolve(filename, @"Unloaded; not found.");

            // We can't handle missing libraries if there's a missing PlexDL path

            if (!string.IsNullOrEmpty(PlexDlLocation))
            {
                // Did the user specify a custom search directory? We need to try and fetch it.
                var customDir = DifferentAssemblyPath();

                // Top-most directory to search for libraries
                var searchDir =
                    string.IsNullOrEmpty(customDir)
                        ? PlexDlLocation
                        : customDir;

                // Log the assembly event
                LogAssemblyResolve(filename, $"Unloaded; searching directory '{searchDir}'.");

                try
                {
                    var toLoad = Directory.GetFiles(searchDir, filename, SearchOption.AllDirectories)
                        .Select(Assembly.LoadFrom).FirstOrDefault();
                    if (toLoad != null)
                    {
                        // Log the assembly event
                        LogAssemblyResolve(filename, @"Loaded; found suitable location.");
                        return toLoad;
                    }

                    LogAssemblyResolve(filename, @"Unloaded; assembly null.");
                }
                catch (Exception ex)
                {
                    // Log the assembly event
                    LogAssemblyResolve(filename, $"Unloaded; exception whilst loading :: {ex.Message}.");
                }
            }

            // The assembly should have been resolved above, if it wasn't then
            // error out and inform the user.
            MessageBox.Show($"Referencing error:\n\n'{args.Name}' could not be found; the application failed to start.", @"Critical Error",
                MessageBoxButtons.OK, MessageBoxIcon.Error);
            // Kill current PlexDL process
            Process.GetCurrentProcess().Kill();

            // Default
            return null;
        }

        /// <summary>
        /// If the user wants to locate assemblies elsewhere, the below routine is executed when the correct argument is passed.
        /// </summary>
        /// <returns></returns>
        public static string DifferentAssemblyPath()
        {
            try
            {
                const string checkFor = @"-libDir=";
                var sep = checkFor[checkFor.Length - 1];

                foreach (var s in Program.Args)
                {
                    if (!s.Contains(checkFor)) continue;

                    var split = s.Split(sep);
                    if (split.Length != 2) continue;

                    var path = split[1];
                    if (Directory.Exists(path))
                        return path;
                }

                return string.Empty;
            }
            catch (Exception)
            {
                return string.Empty;
            }
        }

        /// <summary>
        /// Logs assembly events (only in debug mode!)
        /// </summary>
        /// <param name="fileName">The DLL trying to be loaded</param>
        /// <param name="occurrence">Whatever happened to trigger the event</param>
        public static void LogAssemblyResolve(string fileName, string occurrence)
        {
            try
            {
                if (!Checks.Args.Contains("-debug")) return;

                const string logFileName = @"assemblyResolver.log";

                var already =
                    File.Exists(logFileName)
                        ? File.ReadAllText(logFileName)
                        : @"";
                var timeString = DateTime.Now.ToString(CultureInfo.CurrentCulture);
                var logLine = $"{timeString}: \"{fileName}\" -- {occurrence}";
                var toWrite = !string.IsNullOrEmpty(already)
                    ? $"{already}\n{logLine}"
                    : logLine;
                File.WriteAllText(logFileName, toWrite);
            }
            catch (Exception)
            {
                //do nothing
            }
        }
    }
}