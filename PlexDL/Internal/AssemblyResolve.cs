using System;
using System.IO;
using System.Linq;
using System.Reflection;

namespace PlexDL.Internal
{
    /// <summary>
    /// Handler for finding missing assemblies and reloading them on failure
    /// </summary>
    public static class AssemblyResolve
    {
        //THESE ARE THE FORMAL LOCATIONS OF PLEXDL FILES.
        //THEY ARE CREATED/REMOVED/UPDATED VIA POST-BUILD EVENTS.
        //DO NOT MODIFY UNLESS YOU ARE MODIFYING THE POST-BUILD EVENTS SCRIPT.
        public static string LibraryDirectory { get; } = @"lib";

        public static string DebugDirectory { get; } = @"pdb";
        public static string XmlDirectory { get; } = @""; //NOTE: These are generated by the compiler; not by PlexDL.

        /// <summary>
        /// Main locator and resolver
        /// <br></br>CREDIT: https://weblog.west-wind.com/posts/2016/dec/12/loading-net-assemblies-out-of-seperate-folders
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="args"></param>
        /// <returns></returns>
        public static Assembly HandleResolve(object sender, ResolveEventArgs args)
        {
            // Ignore missing resources
            if (args.Name.Contains(".resources"))
                return null;

            // check for assemblies already loaded
            var assembly = AppDomain.CurrentDomain.GetAssemblies().FirstOrDefault(a => a.FullName == args.Name);
            if (assembly != null)
                return assembly;

            // Try to load by filename - split out the filename of the full assembly name
            // and append the base path of the original assembly (ie. look in the same dir)
            var filename = args.Name.Split(',')[0] + ".dll".ToLower();
            var searchDir = Directory.GetCurrentDirectory();

            try
            {
                return Directory.GetFiles(searchDir, filename, SearchOption.AllDirectories).Select(Assembly.LoadFrom).FirstOrDefault();
            }
            catch (Exception)
            {
                return null;
            }
        }
    }
}