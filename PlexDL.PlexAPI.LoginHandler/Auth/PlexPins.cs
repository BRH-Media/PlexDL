// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using PlexDL.PlexAPI.Auth;
//
//    var plexPins = PlexPins.FromJson(jsonString);

namespace PlexDL.PlexAPI.LoginHandler.Auth
{
    using System;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using UIHelpers;

    public partial class PlexPins
    {
        public static PlexPins NewPlexAuthPin()
        {
            var j = Get.DownloadJson(Endpoints.PlexPinsEndpoint,RestSharp.Method.POST);
            return FromJson(j);
        }
        public PlexPins FromPinEndpoint()
        {
            var j = Get.DownloadJson(PinEndpointUrl);
            return FromJson(j);
        }

        public string PinEndpointUrl => $"https://plex.tv/api/v2/pins/{Id}";
        public string LoginInterfaceUrl => $"https://app.plex.tv/auth/#!?clientID={PlexDefinitions.ClientId}&context[device][version]=Plex OAuth&context[device][model]=Plex OAuth&code={Code}&context[device][product]=Plex Web";

        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("code")]
        public string Code { get; set; }

        [JsonProperty("product")]
        public string Product { get; set; }

        [JsonProperty("trusted")]
        public bool Trusted { get; set; }

        [JsonProperty("clientIdentifier")]
        public string ClientIdentifier { get; set; }

        [JsonProperty("location")]
        public Location Location { get; set; }

        [JsonProperty("expiresIn")]
        public long ExpiresIn { get; set; }

        [JsonProperty("createdAt")]
        public DateTimeOffset CreatedAt { get; set; }

        [JsonProperty("expiresAt")]
        public DateTimeOffset ExpiresAt { get; set; }

        [JsonProperty("authToken")]
        public string AuthToken { get; set; }

        [JsonProperty("newRegistration")]
        public object NewRegistration { get; set; }
    }

    public partial class Location
    {
        [JsonProperty("code")]
        public string Code { get; set; }

        [JsonProperty("country")]
        public string Country { get; set; }

        [JsonProperty("city")]
        public string City { get; set; }

        [JsonProperty("time_zone")]
        public string TimeZone { get; set; }

        [JsonProperty("postal_code")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long PostalCode { get; set; }

        [JsonProperty("subdivisions")]
        public string Subdivisions { get; set; }

        [JsonProperty("coordinates")]
        public string Coordinates { get; set; }
    }

    public partial class PlexPins
    {
        public static PlexPins FromJson(string json) => JsonConvert.DeserializeObject<PlexPins>(json, Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this PlexPins self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
